# This is a basic workflow to help you get started with Actions

name: Build and push the tagged build to production

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    tags:
      - 'v*'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Fetch latest version
        id: fetch_version
        run: echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ secrets.ACR_NAME }}
          username: ${{ secrets.ACR_LOGIN }}
          password: ${{ secrets.ACR_PASSWORD }}
          ecr: # optional, default is auto
          logout: # optional, default is true  
          
      - name: Build and push Docker images
        uses: docker/build-push-action@v3.0.0
          with:
            context: .
            tags: ${{secrets.ACR_NAME}}/contoso-website:latest,${{secrets.ACR_NAME}}/contoso-website:${{ steps.fetch_version.outputs.TAG }}
            push: true

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
                
  deploy:
    runs-on: ubuntu-20.04
    needs: build_push_image # Will wait for the execution of the previous job  

    steps:
      - uses: actions/checkout@v2
      
      - name: Install Helm
        uses: Azure/setup-helm@v3
        with:
          version: v3.3.1
                  
      - name: Set up kubelogin for non-interactive login
        run: |
          curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.9/kubelogin-linux-amd64.zip
          sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
          rm -f kubelogin-linux-amd64.zip
          kubelogin --version
      
      - name: Get AKS Credentials
        uses: Azure/aks-set-context@v3
        with:
          resource-group: mslearn-gh-pipelines-1045
          cluster-name: contoso-video
          subscription: 6be09ae0-3f8d-4739-8812-6cef10ab0a76
          admin: false
          use-kubelogin: true
                          
      - name: Run Helm Deploy
        run: |
          helm upgrade \
            --install \
            --create-namespace \
            --atomic \
            --wait \
            --namespace production \
            contoso-website \
            ./kubernetes/contoso-website \
            --set image.repository=${{ secrets.ACR_NAME }} \
            --set dns.name=${{ secrets.DNS_NAME }}
            --set image.tag=${GITHUB_REF##*/}         
